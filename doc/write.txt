*write.txt*  Get your author on.
*write* *write.vim*

Author:  Nate Soares <http://so8r.es/>
License: Same terms as Vim itself (see |license|)

=============================================================================
CONTENTS                                        *write-contents*
	    1. Introduction................................|write-intro|
	    2. Configuration...............................|write-config|
	    3. Commands....................................|write-commands|
	    4. Extras......................................|write-extras|
	    5. About.......................................|write-about|

==============================================================================
INTRODUCTION                                    *write*

Vim writing mode, for writing non-code text (books, novels, etc.).

==============================================================================
CONFIGURATION                                   *write-commands*

						*g:loaded_write*
Use this to disable the plugin entirely: >
	let g:loaded_write = 1
<

						*g:write_auto*
A list of filetypes that should automatically go into write mode. If the
filetype string ends with a '!', that filetype will automatically go into full
write mode. For example: >
	let g:write_auto=['markdown', 'help', 'text!']
<
Will set up autocommands on markdown, help, and text files to put them into
write mode, and text files will be forced into full write mode regardless of
|textwidth| settings.


==============================================================================
COMMANDS                                        *write-commands*

						*:WriteOn[!]*
Turn writing mode on. Effects include:

* Spell checking
* Line wrapping
* Intuitive cursor movement over long lines
* Display tweaks for long paragraphs

In addition, if |textwidth| is off then line numbers are turned off and soft
wrapping is turned on. If you want hard line wrapping set 'textwidth' to
a non-zero value before calling WriteOn.

If you want to force soft wrapping despite the value of 'textwidth', use: >
	:WriteOn!
<

If you want |textwidth| automatically managed by filetype, check out the
|longlines| plugin at <http://github.com/Soares/longlines.vim>.

						*:WriteOff*
Turn writing mode off. Sets all values changed by :WriteOn back to their
global settings values.

NOTE: Write.vim does not record any of your settings. It makes all changes
local to the current buffer, and when turning off it sets all locally changed
settings back to the global value. If you had local settings in the buffer
that differed from the global value, writer.vim will clobber those settings.

						*:Write[!]*
Toggles writing mode. The bang, if given, will be passed to |:WriteOn|

==============================================================================
EXTRAS                                          *write-extras*

Status Line                                     *write#Writing*
						*write-statusline*
Returns non-zero if writing mode is on. Useful for statusline flags. We
recommend adding something like >
	set statusline+=%#ModeMsg#
	set statusline+=%{write#Writing()?'[W]':''}
	set statusline+=%*
<
to your statusline.

Mappings                                        *write-mappings*
Write.vim does not provide mappings for you. You'll have to set them yourself.
We suggest something along the lines of: >
	noremap <leader>W :Write<CR>
<

==============================================================================
ABOUT						*write-about*

Grab the latest version or report a bug on GitHub:

http://github.com/Soares/write.vim

 vim:tw=78:ts=8:sw=0:sts=8:noet:ft=help:norl:
